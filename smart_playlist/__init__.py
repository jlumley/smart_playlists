import getpass
import logging
import os
import sys
import time
import yaml

from ansible.parsing.vault import VaultLib
from datetime import datetime
from pprint import pprint

path = '/' + os.path.join(*os.path.abspath(__file__).split('/')[1:-2])

sys.path.append(os.path.join(path, 'spotipy'))

import spotipy
import spotipy.util as util

logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s - %(message)s',
                    handlers=[logging.StreamHandler()])

def open_vault(vaultfile=''):
    vault = VaultLib(getpass.getpass('Vault Password: '))
    vault_secret = vault.decrypt(open(vaultfile).read())
    
    return yaml.load(vault_secret, Loader=yaml.SafeLoader)


def get_auth_token(username,
                   scope, 
                   client_id=None,
                   client_secret=None,
                   redirect_uri=None):

    return util.prompt_for_user_token(username,
                                      scope=scope,
                                      client_id=client_id,
                                      client_secret=client_secret,
                                      redirect_uri=redirect_uri)


def history_playlist(sp, user_id):
    '''
    Generate private playlist of the last 50 songs played
    
    regenerate playlist every 5 minutes

    Args:
        - sp      (Spotify Oject) : spotipy client Spotify Object
        - user_id (str):            Spotify user id
    Returns:
        None
    '''

    while (True):
        # get list of last 50 tracks played
        recently_played = sp.current_user_recently_played(limit=50)
        recent_track_ids = [_track['track']['id'] for _track in recently_played['items']
                            if True]
        logging.debug(recent_track_ids)
        
        # update "History" playlist with recently played tracks
        # get "History" playlist id
        history_playlist_id = None
        user_playlists = sp.current_user_playlists()
        for _playlist in user_playlists['items']:
            if _playlist['name'] == 'History':
                history_playlist_id = _playlist['id']
                logging.debug(_playlist)

        updated_description = ('Generated by Smart Playlists - ' +
                               ' {} - '.format(datetime.strftime(datetime.now(), '%c')) +
                               ' https://github.com/jlumley/smart_playlists')
        # if playlist doesn't exist create it
        if not history_playlist_id:
            _playlist = sp.user_playlist_create(user_id, 
                                               'History', 
                                                public=False,
                                                description=updated_description)
            history_playlist_id = _playlist['id']

        # if it does update description
        else:
            sp.user_playlist_change_details(user_id, 
                                            history_playlist_id,
                                            description=updated_description)

        
        sp.user_playlist_replace_tracks(user_id, 
                                        history_playlist_id,
                                        recent_track_ids) 
        time.sleep(180)


def main():

    credentials = open_vault(os.path.join(path, 'vaultfile.yml'))

    token = get_auth_token(credentials.get('username'),
                           scope='playlist-modify-private playlist-read-private user-read-recently-played',
                           client_id=credentials.get('client_id'),
                           client_secret=credentials.get('client_secret'),
                           redirect_uri=credentials.get('redirect_uri'))

    sp = spotipy.Spotify(auth=token)
    history_playlist(sp, credentials.get('username')) 
